%{
#ifdef PRINT
#define TOKEN(t) printf("Token: " #t "\n");
#else
#define TOKEN(t) return(t);
#endif
%}

DIGIT			[0-9]
CHARACTER		'[a-zA-Z]'
INTEGER			("+"|"-"){DIGIT}+
REAL			("+"|"-"){DIGIT}+"."{DIGIT}+
IDENTIFIER		[a-zA-Z]([a-zA-Z]|{DIGIT})*

%%

"."       		TOKEN(FULLSTOP)
"," 			TOKEN(COMMA)
":" 			TOKEN(COLON)
";" 			TOKEN(SEMICOLON)
"->" 			TOKEN(ASSIGN)
"(" 			TOKEN(BRA)
")" 			TOKEN(KET)
"=" 			TOKEN(EQUAL)
"<>" 			TOKEN(NOT_EQUAL)
"<" 			TOKEN(LESS_THAN)
">" 			TOKEN(GREATER_THAN)
"<=" 			TOKEN(LESS_THAN_OR_EQUAL)
">=" 			TOKEN(GREATER_THAN_OR_EQUAL)
"+" 			TOKEN(PLUS)
"-" 			TOKEN(MINUS)
"*" 			TOKEN(TIMES)
"/" 			TOKEN(DIVIDE)
"'"				TOKEN(APOSTROPHE)
ENDP 			TOKEN(ENDP)
DECLARATIONS 	TOKEN(DECLARATIONS)
CODE 			TOKEN(CODE)
OF 				TOKEN(OF)
TYPE 			TOKEN(TYPE)
{CHARACTER}		TOKEN(CHARACTER)
{INTEGER} 		TOKEN(INTEGER)
{REAL} 			TOKEN(REAL)
IF 				TOKEN(IF)
THEN 			TOKEN(THEN)
ENDIF			TOKEN(ENDIF)
ELSE 			TOKEN(ELSE)
DO 				TOKEN(DO)
WHILE 			TOKEN(WHILE)
ENDDO			TOKEN(ENDDO)
ENDWHILE 		TOKEN(ENDWHILE)
FOR 			TOKEN(FOR)
IS 				TOKEN(IS)
BY				TOKEN(BY)
TO 				TOKEN(TO)
ENDFOR 			TOKEN(ENDFOR)
WRITE 			TOKEN(WRITE)
READ 			TOKEN(READ)
NEWLINE 		TOKEN(NEWLINE)
NOT 			TOKEN(NOT)
AND 			TOKEN(AND)
OR 				TOKEN(OR)
{IDENTIFIER}	TOKEN(IDENTIFIER)
{DIGIT}			TOKEN(DIGIT)
.				TOKEN(FAILED TO RECONGNISE)
%%
