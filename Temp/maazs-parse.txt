--01/10/2019----------------------------------------------------- 
Lexical Tokens for a.spl 
--11:34:50.33----------------------------------------------------- 
Token: ProgA ID
Token: COLON
Token: CODE
Token: WRITE
Token: BRA
Token: 'h' LETTER
Token: COMMA
Token: 'e' LETTER
Token: COMMA
Token: 'l' LETTER
Token: COMMA
Token: 'l' LETTER
Token: COMMA
Token: 'o' LETTER
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: ENDP
Token: ProgA ID
Token: FULLSTOP
--01/10/2019----------------------------------------------------- 
Lexical Tokens for b.spl 
--11:39:07.66----------------------------------------------------- 
Token: ProgB ID
Token: COLON
Token: DECLARATIONS
Token: a ID
Token: COMMA
Token: b ID
Token: OF
Token: TYPE
Token: INTEGER
Token: SEMICOLON
Token: c ID
Token: OF
Token: TYPE
Token: CHARACTER
Token: SEMICOLON
Token: d ID
Token: COMMA
Token: e ID
Token: OF
Token: TYPE
Token: REAL
Token: SEMICOLON
Token: CODE
Token: READ
Token: BRA
Token: a ID
Token: KET
Token: SEMICOLON
Token: READ
Token: BRA
Token: b ID
Token: KET
Token: SEMICOLON
Token: IF
Token: a ID
Token: GREATER_THAN
Token: b ID
Token: THEN
Token: WRITE
Token: BRA
Token: 'A' LETTER
Token: KET
Token: ELSE
Token: WRITE
Token: BRA
Token: 'B' LETTER
Token: KET
Token: ENDIF
Token: SEMICOLON
Token: NEWLINE
Token: SEMICOLON
Token: READ
Token: BRA
Token: d ID
Token: KET
Token: SEMICOLON
Token: d ID
Token: TIMES
Token: 2.3 DIGIT
Token: ASSIGN
Token: e ID
Token: SEMICOLON
Token: WRITE
Token: BRA
Token: e ID
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: SEMICOLON
Token: READ
Token: BRA
Token: c ID
Token: KET
Token: SEMICOLON
Token: WRITE
Token: BRA
Token: c ID
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: ENDP
Token: ProgB ID
Token: FULLSTOP
--01/10/2019----------------------------------------------------- 
Lexical Tokens for c.spl 
--11:39:17.63----------------------------------------------------- 
Token: Prog3 ID
Token: COLON
Token: DECLARATIONS
Token: a ID
Token: OF
Token: TYPE
Token: INTEGER
Token: SEMICOLON
Token: CODE
Token: FOR
Token: a ID
Token: IS
Token: 1 DIGIT
Token: BY
Token: 1 DIGIT
Token: TO
Token: 13 DIGIT
Token: DO
Token: IF
Token: NOT
Token: a ID
Token: EQUAL
Token: 7 DIGIT
Token: THEN
Token: WRITE
Token: BRA
Token: a ID
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: ENDIF
Token: ENDFOR
Token: SEMICOLON
Token: 0 DIGIT
Token: ASSIGN
Token: a ID
Token: SEMICOLON
Token: DO
Token: a ID
Token: PLUS
Token: 1 DIGIT
Token: ASSIGN
Token: a ID
Token: SEMICOLON
Token: IF
Token: NOT
Token: a ID
Token: EQUAL
Token: 6 DIGIT
Token: AND
Token: a ID
Token: NOT_EQUAL
Token: 8 DIGIT
Token: THEN
Token: WRITE
Token: BRA
Token: a ID
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: ENDIF
Token: WHILE
Token: a ID
Token: LESS_THAN
Token: 14 DIGIT
Token: ENDDO
Token: SEMICOLON
Token: 0 DIGIT
Token: ASSIGN
Token: a ID
Token: SEMICOLON
Token: WHILE
Token: a ID
Token: LESS_THAN
Token: 12 DIGIT
Token: DO
Token: WRITE
Token: BRA
Token: a ID
Token: KET
Token: SEMICOLON
Token: a ID
Token: PLUS
Token: 1 DIGIT
Token: ASSIGN
Token: a ID
Token: ENDWHILE
Token: SEMICOLON
Token: NEWLINE
Token: ENDP
Token: Prog3 ID
Token: FULLSTOP
--01/10/2019----------------------------------------------------- 
Lexical Tokens for d.spl 
--11:39:23.81----------------------------------------------------- 
Token: Prog4D ID
Token: COLON
Token: DECLARATIONS
Token: r1 ID
Token: COMMA
Token: r2 ID
Token: COMMA
Token: r3 ID
Token: OF
Token: TYPE
Token: REAL
Token: SEMICOLON
Token: CODE
Token: -2.4 DIGIT
Token: ASSIGN
Token: r1 ID
Token: SEMICOLON
Token: -34.989 DIGIT
Token: ASSIGN
Token: r2 ID
Token: SEMICOLON
Token: r1 ID
Token: TIMES
Token: r2 ID
Token: DIVIDE
Token: 7.4 DIGIT
Token: ASSIGN
Token: r3 ID
Token: SEMICOLON
Token: WRITE
Token: BRA
Token: r3 ID
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: SEMICOLON
Token: READ
Token: BRA
Token: r1 ID
Token: KET
Token: SEMICOLON
Token: r1 ID
Token: PLUS
Token: r3 ID
Token: ASSIGN
Token: r3 ID
Token: SEMICOLON
Token: WRITE
Token: BRA
Token: r3 ID
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: ENDP
Token: Prog4D ID
Token: FULLSTOP
--01/10/2019----------------------------------------------------- 
Lexical Tokens for e.spl 
--11:39:27.17----------------------------------------------------- 
Token: ProgV ID
Token: COLON
Token: DECLARATIONS
Token: integer ID
Token: COMMA
Token: i ID
Token: OF
Token: TYPE
Token: INTEGER
Token: SEMICOLON
Token: CODE
Token: READ
Token: BRA
Token: integer ID
Token: KET
Token: SEMICOLON
Token: IF
Token: integer ID
Token: LESS_THAN_OR_EQUAL
Token: 5 DIGIT
Token: OR
Token: integer ID
Token: GREATER_THAN_OR_EQUAL
Token: 12 DIGIT
Token: THEN
Token: WRITE
Token: BRA
Token: integer ID
Token: KET
Token: ENDIF
Token: SEMICOLON
Token: WRITE
Token: BRA
Token: BRA
Token: 36 DIGIT
Token: -1 DIGIT
Token: KET
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: SEMICOLON
Token: FOR
Token: integer ID
Token: IS
Token: -1 DIGIT
Token: BY
Token: -1 DIGIT
Token: TO
Token: -5 DIGIT
Token: DO
Token: WRITE
Token: BRA
Token: integer ID
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: ENDFOR
Token: SEMICOLON
Token: -1 DIGIT
Token: ASSIGN
Token: i ID
Token: SEMICOLON
Token: FOR
Token: integer ID
Token: IS
Token: i ID
Token: TIMES
Token: i ID
Token: TIMES
Token: i ID
Token: BY
Token: i ID
Token: TIMES
Token: i ID
Token: TIMES
Token: i ID
Token: TIMES
Token: i ID
Token: TIMES
Token: i ID
Token: TO
Token: i ID
Token: TIMES
Token: i ID
Token: TIMES
Token: BRA
Token: i ID
Token: PLUS
Token: i ID
Token: PLUS
Token: i ID
Token: PLUS
Token: i ID
Token: PLUS
Token: i ID
Token: KET
Token: DO
Token: WRITE
Token: BRA
Token: integer ID
Token: KET
Token: SEMICOLON
Token: NEWLINE
Token: ENDFOR
Token: ENDP
Token: ProgV ID
Token: FULLSTOP
--01/10/2019----------------------------------------------------- 
Parse debug output for a.spl 
--11:39:38.12----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0
Entering state 3
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 5
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 7
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token LETTER ()
Shifting token LETTER ()
Entering state 20
Reducing stack by rule 57 (line 361):
   $1 = token LETTER ()
-> $$ = nterm character_constant ()
Stack now 0 3 5 7 17 51
Entering state 36
Reducing stack by rule 56 (line 356):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 7 17 51
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 7 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 7 17 51
Entering state 82
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 104
Reading a token: Next token is token LETTER ()
Shifting token LETTER ()
Entering state 20
Reducing stack by rule 57 (line 361):
   $1 = token LETTER ()
-> $$ = nterm character_constant ()
Stack now 0 3 5 7 17 51 82 104
Entering state 36
Reducing stack by rule 56 (line 356):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 7 17 51 82 104
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 7 17 51 82 104
Entering state 115
Reducing stack by rule 32 (line 252):
   $1 = nterm output_list ()
   $2 = token COMMA ()
   $3 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 7 17 51
Entering state 82
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 104
Reading a token: Next token is token LETTER ()
Shifting token LETTER ()
Entering state 20
Reducing stack by rule 57 (line 361):
   $1 = token LETTER ()
-> $$ = nterm character_constant ()
Stack now 0 3 5 7 17 51 82 104
Entering state 36
Reducing stack by rule 56 (line 356):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 7 17 51 82 104
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 7 17 51 82 104
Entering state 115
Reducing stack by rule 32 (line 252):
   $1 = nterm output_list ()
   $2 = token COMMA ()
   $3 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 7 17 51
Entering state 82
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 104
Reading a token: Next token is token LETTER ()
Shifting token LETTER ()
Entering state 20
Reducing stack by rule 57 (line 361):
   $1 = token LETTER ()
-> $$ = nterm character_constant ()
Stack now 0 3 5 7 17 51 82 104
Entering state 36
Reducing stack by rule 56 (line 356):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 7 17 51 82 104
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 7 17 51 82 104
Entering state 115
Reducing stack by rule 32 (line 252):
   $1 = nterm output_list ()
   $2 = token COMMA ()
   $3 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 7 17 51
Entering state 82
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 104
Reading a token: Next token is token LETTER ()
Shifting token LETTER ()
Entering state 20
Reducing stack by rule 57 (line 361):
   $1 = token LETTER ()
-> $$ = nterm character_constant ()
Stack now 0 3 5 7 17 51 82 104
Entering state 36
Reducing stack by rule 56 (line 356):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 7 17 51 82 104
Entering state 35
Reducing stack by rule 53 (li#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>

#define typename(x) _Generic((x), int: "int", float: "float", default: "other")
#define print_any(X) _Generic((X), int: print_int, char *: print_pchar, char: print_char, float: print_float)(X)

int print_int(int i) { return printf("%d", i); }

int print_float(float f) { return printf("%f", f); }

int print_pchar(char *c) { return printf("%s", c); }

int print_char(char c) { return printf("%s", c); }

int main(void) {

	print_any("h");
	print_any("e");
	print_any("l");
	print_any("l");
	print_any("o");
	printf("\n");

}
ne 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 7 17 51 82 104
Entering state 115
Reducing stack by rule 32 (line 252):
   $1 = nterm output_list ()
   $2 = token COMMA ()
   $3 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 7 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 7
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 7
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 7
Entering state 23
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 7 23 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 7 23 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 7
Entering state 23
Reading a token: Next token is token ENDP ()
Reducing stack by rule 3 (line 119):
   $1 = token CODE ()
   $2 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 3 5
Entering state 8
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 38
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 8 38
Entering state 60
Reading a token: Next token is token FULLSTOP ()
Shifting token FULLSTOP ()
Entering state 91
Reducing stack by rule 1 (line 105):
   $1 = nterm identifier ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = nterm identifier ()
   $6 = token FULLSTOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--01/10/2019----------------------------------------------------- 
Parse debug output for b.spl 
--11:40:03.85----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0
Entering state 3
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 5
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 6
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6
Entering state 9
Reducing stack by rule 5 (line 130):
   $1 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6
Entering state 10
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 39
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 10 39
Entering state 61
Reducing stack by rule 6 (line 134):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6
Entering state 10
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 40
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 62
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 93
Reducing stack by rule 10 (line 152):
   $1 = token INTEGER ()
-> $$ = nterm type ()
Stack now 0 3 5 6 10 40 62
Entering state 95
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 107
Reducing stack by rule 7 (line 139):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 3 5 6
Entering state 11
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11
Entering state 9
Reducing stack by rule 5 (line 130):
   $1 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6 11
Entering state 42
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 64
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 96
Reading a token: Next token is token CHARACTER ()
Shifting token CHARACTER ()
Entering state 92
Reducing stack by rule 9 (line 148):
   $1 = token CHARACTER ()
-> $$ = nterm type ()
Stack now 0 3 5 6 11 42 64 96
Entering state 108
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 116
Reducing stack by rule 8 (line 143):
   $1 = nterm declaration_block ()
   $2 = nterm identifier_list ()
   $3 = token OF ()
   $4 = token TYPE ()
   $5 = nterm type ()
   $6 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 3 5 6
Entering state 11
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11
Entering state 9
Reducing stack by rule 5 (line 130):
   $1 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6 11
Entering state 42
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 39
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 42 39
Entering state 61
Reducing stack by rule 6 (line 134):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6 11
Entering state 42
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 64
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 96
Reading a token: Next token is token REAL ()
Shifting token REAL ()
Entering state 94
Reducing stack by rule 11 (line 156):
   $1 = token REAL ()
-> $$ = nterm type ()
Stack now 0 3 5 6 11 42 64 96
Entering state 108
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 116
Reducing stack by rule 8 (line 143):
   $1 = nterm declaration_block ()
   $2 = nterm identifier_list ()
   $3 = token OF ()
   $4 = token TYPE ()
   $5 = nterm type ()
   $6 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 3 5 6
Entering state 11
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 41
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 18 52
Entering state 84
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 106
Reducing stack by rule 30 (line 243):
   $1 = token READ ()
   $2 = token BRA ()
   $3 = nterm identifier ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 3 5 6 11 41
Entering state 31
Reducing stack by rule 20 (line 194):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 18 52
Entering state 84
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 106
Reducing stack by rule 30 (line 243):
   $1 = token READ ()
   $2 = token BRA ()
   $3 = nterm identifier ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 31
Reducing stack by rule 20 (line 194):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 13
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 33
Reading a token: Next token is token GREATER_THAN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 47
Next token is token GREATER_THAN ()
Shifting token GREATER_THAN ()
Entering state 74
Reducing stack by rule 42 (line 296):
   $1 = token GREATER_THAN ()
-> $$ = nterm comparator ()
Stack now 0 3 5 6 11 41 63 53 13 47
Entering state 77
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 33
Reading a token: Next token is token THEN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 99
Next token is token THEN ()
Reducing stack by rule 35 (line 266):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 45
Reducing stack by rule 37 (line 275):
   $1 = nterm basic_conditional ()
-> $$ = nterm conditional ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 46
Next token is token THEN ()
Shifting token THEN ()
Entering state 67
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token LETTER ()
Shifting token LETTER ()
Entering state 20
Reducing stack by rule 57 (line 361):
   $1 = token LETTER ()
-> $$ = nterm character_constant ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 17 51
Entering state 36
Reducing stack by rule 56 (line 356):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 17 51
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 13 46 67
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 13 46 67
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 13 46 67
Entering state 97
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 110
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token LETTER ()
Shifting token LETTER ()
Entering state 20
Reducing stack by rule 57 (line 361):
   $1 = token LETTER ()
-> $$ = nterm character_constant ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 97 110 17 51
Entering state 36
Reducing stack by rule 56 (line 356):
   $1 = nterm character_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 97 110 17 51
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 97 110 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 97 110 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 97 110
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 97 110
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 97 110
Entering state 117
Reading a token: Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 120
Reducing stack by rule 23 (line 208):
   $1 = token IF ()
   $2 = nterm conditional ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ELSE ()
   $6 = nterm statement_list ()
   $7 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 26
Reducing stack by rule 15 (line 174):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 18 52
Entering state 84
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 106
Reducing stack by rule 30 (line 243):
   $1 = token READ ()
   $2 = token BRA ()
   $3 = nterm identifier ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 31
Reducing stack by rule 20 (line 194):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 33 58
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 33 58
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 18 52
Entering state 84
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 106
Reducing stack by rule 30 (line 243):
   $1 = token READ ()
   $2 = token BRA ()
   $3 = nterm identifier ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 31
Reducing stack by rule 20 (line 194):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token WRI#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>

#define typename(x) _Generic((x), int: "int", float: "float", default: "other")
#define print_any(X) _Generic((X), int: print_int, char *: print_pchar, char: print_char, float: print_float)(X)

int print_int(int i) { return printf("%d", i); }

int print_float(float f) { return printf("%f", f); }

int print_pchar(char *c) { return printf("%s", c); }

int print_char(char c) { return printf("%s", c); }

int main(void) {

	int a, b;

	char c;

	float d, e;

	char *str;
	scanf("%s", str);
	if(typename(a) == "other")
		a = *str;
	else if(typename(a) == "int")
		a = atoi(str);
	else if(typename(a) == "float")
		a = atof(str);

	scanf("%s", str);
	if(typename(b) == "other")
		b = *str;
	else if(typename(b) == "int")
		b = atoi(str);
	else if(typename(b) == "float")
		b = atof(str);


	if (a > b) {
		print_any("A");
	}
	else {
		print_any("B");
	}

	printf("\n");
	scanf("%s", str);
	if(typename(d) == "other")
		d = *str;
	else if(typename(d) == "int")
		d = atoi(str);
	else if(typename(d) == "float")
		d = atof(str);

	e = d * 2.3;
	print_any(e);
	printf("\n");
	scanf("%s", str);
	if(typename(c) == "other")
		c = *str;
	else if(typename(c) == "int")
		c = atoi(str);
	else if(typename(c) == "float")
		c = atof(str);

	print_any(c);
	printf("\n");

}
TE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token ENDP ()
Reducing stack by rule 2 (line 115):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_block ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 3 5
Entering state 8
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 38
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 8 38
Entering state 60
Reading a token: Next token is token FULLSTOP ()
Shifting token FULLSTOP ()
Entering state 91
Reducing stack by rule 1 (line 105):
   $1 = nterm identifier ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = nterm identifier ()
   $6 = token FULLSTOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--01/10/2019----------------------------------------------------- 
Parse debug output for c.spl 
--11:40:10.73----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0
Entering state 3
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 5
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 6
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6
Entering state 9
Reducing stack by rule 5 (line 130):
   $1 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6
Entering state 10
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 40
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 62
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 93
Reducing stack by rule 10 (line 152):
   $1 = token INTEGER ()
-> $$ = nterm type ()
Stack now 0 3 5 6 10 40 62
Entering state 95
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 107
Reducing stack by rule 7 (line 139):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 3 5 6
Entering state 11
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 41
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 16
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 16
Entering state 50
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 80
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 16 50 80
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 16 50 80
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 16 50 80
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 16 50 80
Entering state 33
Reading a token: Next token is token BY ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 16 50 80
Entering state 102
Next token is token BY ()
Shifting token BY ()
Entering state 113
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 16 50 80 102 113
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 16 50 80 102 113
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 16 50 80 102 113
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 16 50 80 102 113
Entering state 33
Reading a token: Next token is token TO ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 16 50 80 102 113
Entering state 118
Next token is token TO ()
Shifting token TO ()
Entering state 121
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 16 50 80 102 113 118 121
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 16 50 80 102 113 118 121
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 16 50 80 102 113 118 121
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 16 50 80 102 113 118 121
Entering state 33
Reading a token: Next token is token DO ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 16 50 80 102 113 118 121
Entering state 122
Next token is token DO ()
Reducing stack by rule 26 (line 223):
   $1 = token IS ()
   $2 = nterm expression ()
   $3 = token BY ()
   $4 = nterm expression ()
   $5 = token TO ()
   $6 = nterm expression ()
-> $$ = nterm for_conditions ()
Stack now 0 3 5 6 11 41 16 50
Entering state 81
Next token is token DO ()
Shifting token DO ()
Entering state 103
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 13
Reading a token: Next token is token NOT ()
Shifting token NOT ()
Entering state 44
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44
Entering state 33
Reading a token: Next token is token EQUAL ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44
Entering state 47
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 71
Reducing stack by rule 39 (line 284):
   $1 = token EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44 47
Entering state 77
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44 47 77
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44 47 77
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44 47 77
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44 47 77
Entering state 33
Reading a token: Next token is token THEN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44 47 77
Entering state 99
Next token is token THEN ()
Reducing stack by rule 35 (line 266):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 44
Entering state 66
Reducing stack by rule 36 (line 270):
   $1 = token NOT ()
   $2 = nterm basic_conditional ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 16 50 81 103 13
Entering state 45
Reducing stack by rule 37 (line 275):
   $1 = nterm basic_conditional ()
-> $$ = nterm conditional ()
Stack now 0 3 5 6 11 41 16 50 81 103 13
Entering state 46
Next token is token THEN ()
Shifting token THEN ()
Entering state 67
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67
Entering state 97
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67 97 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67 97 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 16 50 81 103 13 46 67
Entering state 97
Reading a token: Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 109
Reducing stack by rule 22 (line 204):
   $1 = token IF ()
   $2 = nterm conditional ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 3 5 6 11 41 16 50 81 103
Entering state 26
Reducing stack by rule 15 (line 174):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 16 50 81 103
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 16 50 81 103
Entering state 114
Reading a token: Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 27 (line 229):
   $1 = token FOR ()
   $2 = nterm identifier ()
   $3 = nterm for_conditions ()
   $4 = token DO ()
   $5 = nterm statement_list ()
   $6 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 3 5 6 11 41
Entering state 29
Reducing stack by rule 18 (line 186):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token DO ()
Shifting token DO ()
Entering state 14
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 33
Reading a token: Next token is token PLUS ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 32
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 55
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 14 32 55
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 14 32 55
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14 32 55
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 14 32 55
Entering state 87
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 47 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 14 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 48
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 13
Reading a token: Next token is token NOT ()
Shifting token NOT ()
Entering state 44
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44
Entering state 33
Reading a token: Next token is token EQUAL ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44
Entering state 47
Next token is token EQUAL ()
Shifting token EQUAL ()
Entering state 71
Reducing stack by rule 39 (line 284):
   $1 = token EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44 47
Entering state 77
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44 47 77
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44 47 77
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44 47 77
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44 47 77
Entering state 33
Reading a token: Next token is token AND ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44 47 77
Entering state 99
Next token is token AND ()
Reducing stack by rule 35 (line 266):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 44
Entering state 66
Reducing stack by rule 36 (line 270):
   $1 = token NOT ()
   $2 = nterm basic_conditional ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13
Entering state 45
Reducing stack by rule 37 (line 275):
   $1 = nterm basic_conditional ()
-> $$ = nterm conditional ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13
Entering state 46
Next token is token AND ()
Shifting token AND ()
Entering state 68
Reducing stack by rule 33 (line 257):
   $1 = token AND ()
-> $$ = nterm logical_operator ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46
Entering state 70
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70
Entering state 33
Reading a token: Next token is token NOT_EQUAL ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70
Entering state 47
Next token is token NOT_EQUAL ()
Shifting token NOT_EQUAL ()
Entering state 72
Reducing stack by rule 40 (line 288):
   $1 = token NOT_EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70 47
Entering state 77
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70 47 77
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70 47 77
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70 47 77
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70 47 77
Entering state 33
Reading a token: Next token is token THEN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70 47 77
Entering state 99
Next token is token THEN ()
Reducing stack by rule 35 (line 266):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 70
Entering state 98
Reducing stack by rule 38 (line 279):
   $1 = nterm conditional ()
   $2 = nterm logical_operator ()
   $3 = nterm basic_conditional ()
-> $$ = nterm conditional ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13
Entering state 46
Next token is token THEN ()
Shifting token THEN ()
Entering state 67
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67
Entering state 97
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67 97 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67 97 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 14 48 53 13 46 67
Entering state 97
Reading a token: Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 109
Reducing stack by rule 22 (line 204):
   $1 = token IF ()
   $2 = nterm conditional ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 3 5 6 11 41 63 53 14 48 53
Entering state 26
Reducing stack by rule 15 (line 174):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 14 48 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 14
Entering state 48
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 78
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 14 48 78
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14 48 78
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 14 48 78
Entering state 33
Reading a token: Next token is token LESS_THAN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 14 48 78
Entering state 47
Next token is token LESS_THAN ()
Shifting token LESS_THAN ()
Entering state 73
Reducing stack by rule 41 (line 292):
   $1 = token LESS_THAN ()
-> $$ = nterm comparator ()
Stack now 0 3 5 6 11 41 63 53 14 48 78 47
Entering state 77
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 14 48 78 47 77
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 14 48 78 47 77
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 14 48 78 47 77
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 14 48 78 47 77
Entering state 33
Reading a token: Next token is token ENDDO ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 14 48 78 47 77
Entering state 99
Next token is token ENDDO ()
Reducing stack by rule 35 (line 266):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 63 53 14 48 78
Entering state 45
Reducing stack by rule 37 (line 275):
   $1 = nterm basic_conditional ()
-> $$ = nterm conditional ()
Stack now 0 3 5 6 11 41 63 53 14 48 78
Entering state 100
Next token is token ENDDO ()
Shifting token ENDDO ()
Entering state 111
Reducing stack by rule 24 (line 213):
   $1 = token DO ()
   $2 = nterm statement_list ()
   $3 = token WHILE ()
   $4 = nterm conditional ()
   $5 = token ENDDO ()
-> $$ = nterm do_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 27
Reducing stack by rule 16 (line 178):
   $1 = nterm do_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 15
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 15
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 15
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 15
Entering state 33
Reading a token: Next token is token LESS_THAN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 15
Entering state 47
Next token is token LESS_THAN ()
Shifting token LESS_THAN ()
Entering state 73
Reducing stack by rule 41 (line 292):
   $1 = token LESS_THAN ()
-> $$ = nterm comparator ()
Stack now 0 3 5 6 11 41 63 53 15 47
Entering state 77
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 15 47 77
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 15 47 77
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 15 47 77
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 15 47 77
Entering state 33
Reading a token: Next token is token DO ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 15 47 77
Entering state 99
Next token is token DO ()
Reducing stack by rule 35 (line 266):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 63 53 15
Entering state 45
Reducing stack by rule 37 (line 275):
   $1 = nterm basic_conditional ()
-> $$ = nterm conditional ()
Stack now 0 3 5 6 11 41 63 53 15
Entering state 49
Next token is token DO ()
Shifting token DO ()
Entering state 79
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 15 49 79
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 15 49 79
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 15 49 79
Entering state 101
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53
Entering state 33
Reading a token: Next token is token PLUS ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53
Entering state 32
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 55
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53 32 55
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53 32 55
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53 32 55
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53 32 55
Entering state 87
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 47 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 15 49 79 101 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 15 49 79
Entering state 101
Reading a token: Next token is token ENDWHILE ()
Shifting token ENDWHILE ()
Entering state 112
Reducing stack by rule 25 (line 218):
   $1 = token WHILE ()
   $2 = nterm conditional ()
   $3 = token DO ()
   $4 = nterm statement_list ()
   $5 = token ENDWHILE ()
-> $$ = nterm while_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 28
Reducing stack by rule 17 (line 182):
   $1 = nterm while_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token ENDP ()
Reducing stack by rule 2 (line 115):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_block ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 3 5
Entering state 8
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 38
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = n#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>

#define typename(x) _Generic((x), int: "int", float: "float", default: "other")
#define print_any(X) _Generic((X), int: print_int, char *: print_pchar, char: print_char, float: print_float)(X)

int print_int(int i) { return printf("%d", i); }

int print_float(float f) { return printf("%f", f); }

int print_pchar(char *c) { return printf("%s", c); }

int print_char(char c) { return printf("%s", c); }

int main(void) {

	int a;


	for ( a = 1; a < 13; a = a + 1) {
	
	if (!a == 7) {
		print_any(a);
		printf("\n");
	}

	}

	a = 0;

	do {
		a = a + 1;

	if (!a == 6 && a != 8) {
		print_any(a);
	printf("\n");
	}

	} while (a < 14);

	a = 0;

	while (a < 12) {
		print_any(a);
	a = a + 1;
	}

	printf("\n");

}
term identifier ()
Stack now 0 3 5 8 38
Entering state 60
Reading a token: Next token is token FULLSTOP ()
Shifting token FULLSTOP ()
Entering state 91
Reducing stack by rule 1 (line 105):
   $1 = nterm identifier ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = nterm identifier ()
   $6 = token FULLSTOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--01/10/2019----------------------------------------------------- 
Parse debug output for d.spl 
--11:40:14.57----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0
Entering state 3
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 5
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 6
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6
Entering state 9
Reducing stack by rule 5 (line 130):
   $1 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6
Entering state 10
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 39
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 10 39
Entering state 61
Reducing stack by rule 6 (line 134):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6
Entering state 10
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 39
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 10 39
Entering state 61
Reducing stack by rule 6 (line 134):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6
Entering state 10
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 40
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 62
Reading a token: Next token is token REAL ()
Shifting token REAL ()
Entering state 94
Reducing stack by rule 11 (line 156):
   $1 = token REAL ()
-> $$ = nterm type ()
Stack now 0 3 5 6 10 40 62
Entering state 95
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 107
Reducing stack by rule 7 (line 139):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 3 5 6
Entering state 11
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 41
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41
Entering state 33
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 33 58
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token DIVIDE ()
Shifting token DIVIDE ()
Entering state 59
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 33 59
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 33 59
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 33 59
Entering state 90
Reducing stack by rule 51 (line 334):
   $1 = nterm term ()
   $2 = token DIVIDE ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 18 52
Entering state 84
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 106
Reducing stack by rule 30 (line 243):
   $1 = token READ ()
   $2 = token BRA ()
   $3 = nterm identifier ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 31
Reducing stack by rule 20 (line 194):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token PLUS ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53
Entering state 32
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 55
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 32 55
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 32 55
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 32 55
Entering state 87
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 47 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Enterin#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>

#define typename(x) _Generic((x), int: "int", float: "float", default: "other")
#define print_any(X) _Generic((X), int: print_int, char *: print_pchar, char: print_char, float: print_float)(X)

int print_int(int i) { return printf("%d", i); }

int print_float(float f) { return printf("%f", f); }

int print_pchar(char *c) { return printf("%s", c); }

int print_char(char c) { return printf("%s", c); }

int main(void) {

	float r1, r2, r3;

	r1 = -2.4;
	r2 = -34.989;
	r3 = r1 * r2 / 7.4;
	print_any(r3);
	printf("\n");
	char *str;
	scanf("%s", str);
	if(typename(r1) == "other")
		r1 = *str;
	else if(typename(r1) == "int")
		r1 = atoi(str);
	else if(typename(r1) == "float")
		r1 = atof(str);

	r3 = r1 + r3;
	print_any(r3);
	printf("\n");

}
g state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token ENDP ()
Reducing stack by rule 2 (line 115):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_block ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 3 5
Entering state 8
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 38
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 8 38
Entering state 60
Reading a token: Next token is token FULLSTOP ()
Shifting token FULLSTOP ()
Entering state 91
Reducing stack by rule 1 (line 105):
   $1 = nterm identifier ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = nterm identifier ()
   $6 = token FULLSTOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
--01/10/2019----------------------------------------------------- 
Parse debug output for e.spl 
--11:40:17.66----------------------------------------------------- 
Starting parse
Entering state 0
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0
Entering state 3
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 5
Reading a token: Next token is token DECLARATIONS ()
Shifting token DECLARATIONS ()
Entering state 6
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6
Entering state 9
Reducing stack by rule 5 (line 130):
   $1 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6
Entering state 10
Reading a token: Next token is token COMMA ()
Shifting token COMMA ()
Entering state 39
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 10 39
Entering state 61
Reducing stack by rule 6 (line 134):
   $1 = nterm identifier_list ()
   $2 = token COMMA ()
   $3 = nterm identifier ()
-> $$ = nterm identifier_list ()
Stack now 0 3 5 6
Entering state 10
Reading a token: Next token is token OF ()
Shifting token OF ()
Entering state 40
Reading a token: Next token is token TYPE ()
Shifting token TYPE ()
Entering state 62
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 93
Reducing stack by rule 10 (line 152):
   $1 = token INTEGER ()
-> $$ = nterm type ()
Stack now 0 3 5 6 10 40 62
Entering state 95
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 107
Reducing stack by rule 7 (line 139):
   $1 = nterm identifier_list ()
   $2 = token OF ()
   $3 = token TYPE ()
   $4 = nterm type ()
   $5 = token SEMICOLON ()
-> $$ = nterm declaration_block ()
Stack now 0 3 5 6
Entering state 11
Reading a token: Next token is token CODE ()
Shifting token CODE ()
Entering state 41
Reading a token: Next token is token READ ()
Shifting token READ ()
Entering state 18
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 52
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 18 52
Entering state 84
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 106
Reducing stack by rule 30 (line 243):
   $1 = token READ ()
   $2 = token BRA ()
   $3 = nterm identifier ()
   $4 = token KET ()
-> $$ = nterm read_statement ()
Stack now 0 3 5 6 11 41
Entering state 31
Reducing stack by rule 20 (line 194):
   $1 = nterm read_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 13
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 33
Reading a token: Next token is token LESS_THAN_OR_EQUAL ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 47
Next token is token LESS_THAN_OR_EQUAL ()
Shifting token LESS_THAN_OR_EQUAL ()
Entering state 75
Reducing stack by rule 43 (line 300):
   $1 = token LESS_THAN_OR_EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 3 5 6 11 41 63 53 13 47
Entering state 77
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 33
Reading a token: Next token is token OR ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 13 47 77
Entering state 99
Next token is token OR ()
Reducing stack by rule 35 (line 266):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 45
Reducing stack by rule 37 (line 275):
   $1 = nterm basic_conditional ()
-> $$ = nterm conditional ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 46
Next token is token OR ()
Shifting token OR ()
Entering state 69
Reducing stack by rule 34 (line 261):
   $1 = token OR ()
-> $$ = nterm logical_operator ()
Stack now 0 3 5 6 11 41 63 53 13 46
Entering state 70
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 13 46 70
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13 46 70
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 13 46 70
Entering state 33
Reading a token: Next token is token GREATER_THAN_OR_EQUAL ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 13 46 70
Entering state 47
Next token is token GREATER_THAN_OR_EQUAL ()
Shifting token GREATER_THAN_OR_EQUAL ()
Entering state 76
Reducing stack by rule 44 (line 304):
   $1 = token GREATER_THAN_OR_EQUAL ()
-> $$ = nterm comparator ()
Stack now 0 3 5 6 11 41 63 53 13 46 70 47
Entering state 77
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 13 46 70 47 77
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 13 46 70 47 77
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13 46 70 47 77
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 13 46 70 47 77
Entering state 33
Reading a token: Next token is token THEN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 13 46 70 47 77
Entering state 99
Next token is token THEN ()
Reducing stack by rule 35 (line 266):
   $1 = nterm expression ()
   $2 = nterm comparator ()
   $3 = nterm expression ()
-> $$ = nterm basic_conditional ()
Stack now 0 3 5 6 11 41 63 53 13 46 70
Entering state 98
Reducing stack by rule 38 (line 279):
   $1 = nterm conditional ()
   $2 = nterm logical_operator ()
   $3 = nterm basic_conditional ()
-> $$ = nterm conditional ()
Stack now 0 3 5 6 11 41 63 53 13
Entering state 46
Next token is token THEN ()
Shifting token THEN ()
Entering state 67
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 13 46 67 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 13 46 67
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 13 46 67
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 13 46 67
Entering state 97
Reading a token: Next token is token ENDIF ()
Shifting token ENDIF ()
Entering state 109
Reducing stack by rule 22 (line 204):
   $1 = token IF ()
   $2 = nterm conditional ()
   $3 = token THEN ()
   $4 = nterm statement_list ()
   $5 = token ENDIF ()
-> $$ = nterm if_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 26
Reducing stack by rule 15 (line 174):
   $1 = nterm if_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 12
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 17 51 12
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 17 51 12
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 17 51 12
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 17 51 12
Entering state 33
Reading a token: Next token is token DIGIT ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 17 51 12
Entering state 43
Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 17 51 12 43
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 17 51 12 43
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 17 51 12 43
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 17 51 12 43
Entering state 57
Reading a token: Next token is token KET ()
Reducing stack by rule 46 (line 313):
   $1 = nterm expression ()
   $2 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 17 51 12
Entering state 43
Next token is token KET ()
Shifting token KET ()
Entering state 65
Reducing stack by rule 54 (line 347):
   $1 = token BRA ()
   $2 = nterm expression ()
   $3 = token KET ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 16
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16
Entering state 50
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 80
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 33
Reading a token: Next token is token BY ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 102
Next token is token BY ()
Shifting token BY ()
Entering state 113
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 33
Reading a token: Next token is token TO ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 118
Next token is token TO ()
Shifting token TO ()
Entering state 121
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 33
Reading a token: Next token is token DO ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 122
Next token is token DO ()
Reducing stack by rule 26 (line 223):
   $1 = token IS ()
   $2 = nterm expression ()
   $3 = token BY ()
   $4 = nterm expression ()
   $5 = token TO ()
   $6 = nterm expression ()
-> $$ = nterm for_conditions ()
Stack now 0 3 5 6 11 41 63 53 16 50
Entering state 81
Next token is token DO ()
Shifting token DO ()
Entering state 103
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103
Entering state 114
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 114 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 114 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103
Entering state 114
Reading a token: Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 27 (line 229):
   $1 = token FOR ()
   $2 = nterm identifier ()
   $3 = nterm for_conditions ()
   $4 = token DO ()
   $5 = nterm statement_list ()
   $6 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 29
Reducing stack by rule 18 (line 186):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token DIGIT ()
Shifting token DIGIT ()
Entering state 21
Reducing stack by rule 58 (line 367):
   $1 = token DIGIT ()
-> $$ = nterm number_constant ()
Stack now 0 3 5 6 11 41 63 53
Entering state 37
Reducing stack by rule 55 (line 352):
   $1 = nterm number_constant ()
-> $$ = nterm constant ()
Stack now 0 3 5 6 11 41 63 53
Entering state 35
Reducing stack by rule 53 (line 343):
   $1 = nterm constant ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53
Entering state 33
Reading a token: Next token is token ASSIGN ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53
Entering state 32
Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 54
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 32 54
Entering state 86
Reducing stack by rule 21 (line 199):
   $1 = nterm expression ()
   $2 = token ASSIGN ()
   $3 = nterm identifier ()
-> $$ = nterm assignment_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 25
Reducing stack by rule 14 (line 170):
   $1 = nterm assignment_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 16
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16
Entering state 50
Reading a token: Next token is token IS ()
Shifting token IS ()
Entering state 80
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 33 58
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 33 58
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 33
Reading a token: Next token is token BY ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80
Entering state 102
Next token is token BY ()
Shifting token BY ()
Entering state 113
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 33 58
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 33 58
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 33 58
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 33 58
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 33
Reading a token: Next token is token TO ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113
Entering state 118
Next token is token TO ()
Shifting token TO ()
Entering state 121
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 33
Reading a token: Next token is token TIMES ()
Shifting token TIMES ()
Entering state 58
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 12
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12
Entering state 33
Reading a token: Next token is token PLUS ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12
Entering state 43
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 55
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 87
Reading a token: Next token is token PLUS ()
Reducing stack by rule 47 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12
Entering state 43
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 55
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 87
Reading a token: Next token is token PLUS ()
Reducing stack by rule 47 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12
Entering state 43
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 55
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 87
Reading a token: Next token is token PLUS ()
Reducing stack by rule 47 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12
Entering state 43
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 55
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 34
Reducing stack by rule 49 (line 326):
   $1 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12 43 55
Entering state 87
Reading a token: Next token is token KET ()
Reducing stack by rule 47 (line 317):
   $1 = nterm expression ()
   $2 = token PLUS ()
   $3 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58 12
Entering state 43
Next token is token KET ()
Shifting token KET ()
Entering state 65
Reducing stack by rule 54 (line 347):
   $1 = token BRA ()
   $2 = nterm expression ()
   $3 = token KET ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121 33 58
Entering state 89
Reducing stack by rule 50 (line 330):
   $1 = nterm term ()
   $2 = token TIMES ()
   $3 = nterm value ()
-> $$ = nterm term ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 33
Reading a token: Next token is token DO ()
Reducing stack by rule 45 (line 309):
   $1 = nterm term ()
-> $$ = nterm expression ()
Stack now 0 3 5 6 11 41 63 53 16 50 80 102 113 118 121
Entering state 122
Next token is token DO ()
Reducing stack by rule 26 (line 223):
   $1 = token IS ()
   $2 = nterm expression ()
   $3 = token BY ()
   $4 = nterm expression ()
   $5 = token TO ()
   $6 = nterm expression ()
-> $$ = nterm for_conditions ()
Stack now 0 3 5 6 11 41 63 53 16 50
Entering state 81
Next token is token DO ()
Shifting token DO ()
Entering state 103
Reading a token: Next token is token WRITE ()
Shifting token WRITE ()
Entering state 17
Reading a token: Next token is token BRA ()
Shifting token BRA ()
Entering state 51
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 17 51
Entering state 22
Reducing stack by rule 52 (line 339):
   $1 = nterm identifier ()
-> $$ = nterm value ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 17 51
Entering state 83
Reducing stack by rule 31 (line 248):
   $1 = nterm value ()
-> $$ = nterm output_list ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 17 51
Entering state 82
Reading a token: Next token is token KET ()
Shifting token KET ()
Entering state 105
Reducing stack by rule 28 (line 234):
   $1 = token WRITE ()
   $2 = token BRA ()
   $3 = nterm output_list ()
   $4 = token KET ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 = nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103
Entering state 24
Reducing stack by rule 12 (line 161):
   $1 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103
Entering state 114
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 53
Reading a token: Next token is token NEWLINE ()
Shifting token NEWLINE ()
Entering state 19
Reducing stack by rule 29 (line 238):
   $1 = token NEWLINE ()
-> $$ = nterm write_statement ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 114 53
Entering state 30
Reducing stack by rule 19 (line 190):
   $1 =#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>

#define typename(x) _Generic((x), int: "int", float: "float", default: "other")
#define print_any(X) _Generic((X), int: print_int, char *: print_pchar, char: print_char, float: print_float)(X)

int print_int(int i) { return printf("%d", i); }

int print_float(float f) { return printf("%f", f); }

int print_pchar(char *c) { return printf("%s", c); }

int print_char(char c) { return printf("%s", c); }

int main(void) {

	int integer, i;

	char *str;
	scanf("%s", str);
	if(typename(integer) == "other")
		integer = *str;
	else if(typename(integer) == "int")
		integer = atoi(str);
	else if(typename(integer) == "float")
		integer = atof(str);


	if (integer <= 5 || integer >= 12) {
		print_any(integer);
	}

	print_any((36-1));
	printf("\n");

	for ( integer = -1; integer < -5; integer = integer + -1) {
		print_any(integer);
		printf("\n");
	}

	i = -1;

	for ( integer = i * i * i; i < i * i * (i + i + i + i + i); i = i + i * i * i * i * i) {
		print_any(integer);
		printf("\n");
	}


}
 nterm write_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103 114 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41 63 53 16 50 81 103
Entering state 114
Reading a token: Next token is token ENDFOR ()
Shifting token ENDFOR ()
Entering state 119
Reducing stack by rule 27 (line 229):
   $1 = token FOR ()
   $2 = nterm identifier ()
   $3 = nterm for_conditions ()
   $4 = token DO ()
   $5 = nterm statement_list ()
   $6 = token ENDFOR ()
-> $$ = nterm for_statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 29
Reducing stack by rule 18 (line 186):
   $1 = nterm for_statement ()
-> $$ = nterm statement ()
Stack now 0 3 5 6 11 41 63 53
Entering state 85
Reducing stack by rule 13 (line 165):
   $1 = nterm statement_list ()
   $2 = token SEMICOLON ()
   $3 = nterm statement ()
-> $$ = nterm statement_list ()
Stack now 0 3 5 6 11 41
Entering state 63
Reading a token: Next token is token ENDP ()
Reducing stack by rule 2 (line 115):
   $1 = token DECLARATIONS ()
   $2 = nterm declaration_block ()
   $3 = token CODE ()
   $4 = nterm statement_list ()
-> $$ = nterm block ()
Stack now 0 3 5
Entering state 8
Next token is token ENDP ()
Shifting token ENDP ()
Entering state 38
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 1
Reducing stack by rule 4 (line 124):
   $1 = token ID ()
-> $$ = nterm identifier ()
Stack now 0 3 5 8 38
Entering state 60
Reading a token: Next token is token FULLSTOP ()
Shifting token FULLSTOP ()
Entering state 91
Reducing stack by rule 1 (line 105):
   $1 = nterm identifier ()
   $2 = token COLON ()
   $3 = nterm block ()
   $4 = token ENDP ()
   $5 = nterm identifier ()
   $6 = token FULLSTOP ()
-> $$ = nterm program ()
Stack now 0
Entering state 2
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 4
Stack now 0 2 4
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
